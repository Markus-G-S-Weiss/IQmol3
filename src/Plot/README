This version of QCustomPlot has been slightly modified:

--- /Users/agilbert/Development/qcustomplot/qcustomplot.cpp	2021-03-30 21:48:47.000000000 +1100
+++ qcustomplot.cpp	2021-10-25 22:57:19.000000000 +1100
@@ -10903,6 +10903,39 @@
       painter->drawLine(QLineF(  x, y+w,   x, y-w));
       break;
     }
+    case ssVirtual:
+    {
+      painter->drawLine(QLineF(x-5*w, y, x+5*w, y));
+      break;
+    }
+    case ssOccupied:
+    {
+      painter->drawLine(QLineF(x-5*w, y,     x+5*w, y));
+      QBrush b = painter->brush();
+      painter->setBrush(Qt::green);
+      painter->drawEllipse(QPointF(x , y), w, w);
+      painter->setBrush(b);
+      break;
+    }
+    case ssHole:
+    {
+      painter->drawLine(QLineF(x-5*w, y,     x+5*w, y));
+      QBrush b = painter->brush();
+      painter->setBrush(Qt::white);
+      painter->drawEllipse(QPointF(x , y), w, w);
+      painter->setBrush(b);
+      break;
+    }
+    case ssDoublyOccupied:
+    {
+      painter->drawLine(QLineF(x-5*w, y, x+5*w, y));
+      QBrush b = painter->brush();
+      painter->setBrush(Qt::green);
+      painter->drawEllipse(QPointF(x-2*w, y), w, w);
+      painter->drawEllipse(QPointF(x+2*w, y), w, w);
+      painter->setBrush(b);
+      break;
+    }
     case ssCircle:
     {
       painter->drawEllipse(QPointF(x , y), w, w);


--- /Users/agilbert/Development/qcustomplot/qcustomplot.h	2021-03-30 21:48:46.000000000 +1100
+++ qcustomplot.h	2021-10-26 11:21:42.000000000 +1100
@@ -153,29 +153,11 @@
 /*!
   The QCP Namespace contains general enums, QFlags and functions used throughout the QCustomPlot
   library.
-  
+
   It provides QMetaObject-based reflection of its enums and flags via \a QCP::staticMetaObject.
 */
-#ifndef Q_MOC_RUN
 namespace QCP {
-#else
-class QCP { // when in moc-run, make it look like a class, so we get Q_GADGET, Q_ENUMS/Q_FLAGS features in namespace
-  Q_GADGET
-  Q_ENUMS(ExportPen)
-  Q_ENUMS(ResolutionUnit)
-  Q_ENUMS(SignDomain)
-  Q_ENUMS(MarginSide)
-  Q_FLAGS(MarginSides)
-  Q_ENUMS(AntialiasedElement)
-  Q_FLAGS(AntialiasedElements)
-  Q_ENUMS(PlottingHint)
-  Q_FLAGS(PlottingHints)
-  Q_ENUMS(Interaction)
-  Q_FLAGS(Interactions)
-  Q_ENUMS(SelectionRectMode)
-  Q_ENUMS(SelectionType)
-public:
-#endif
+  Q_NAMESPACE
 
 /*!
   Defines the different units in which the image resolution can be specified in the export
@@ -318,6 +300,20 @@
                      ,stMultipleDataRanges ///< Any combination of data points/ranges can be selected
                     };
 
+  Q_ENUM_NS(ExportPen)
+  Q_ENUM_NS(ResolutionUnit)
+  Q_ENUM_NS(SignDomain)
+  Q_ENUM_NS(MarginSide)
+  Q_FLAG_NS(MarginSides)
+  Q_ENUM_NS(AntialiasedElement)
+  Q_FLAG_NS(AntialiasedElements)
+  Q_ENUM_NS(PlottingHint)
+  Q_FLAG_NS(PlottingHints)
+  Q_ENUM_NS(Interaction)
+  Q_FLAG_NS(Interactions)
+  Q_ENUM_NS(SelectionRectMode)
+  Q_ENUM_NS(SelectionType)
+
 /*! \internal
   
   Returns whether the specified \a value is considered an invalid data value for plottables (i.e.
@@ -378,23 +374,12 @@
   return 0;
 }
 
-
-extern const QMetaObject staticMetaObject; // in moc-run we create a static meta object for QCP "fake" object. This line is the link to it via QCP::staticMetaObject in normal operation as namespace
-
 } // end of namespace QCP
 Q_DECLARE_OPERATORS_FOR_FLAGS(QCP::AntialiasedElements)
 Q_DECLARE_OPERATORS_FOR_FLAGS(QCP::PlottingHints)
 Q_DECLARE_OPERATORS_FOR_FLAGS(QCP::MarginSides)
 Q_DECLARE_OPERATORS_FOR_FLAGS(QCP::Interactions)
-Q_DECLARE_METATYPE(QCP::ExportPen)
-Q_DECLARE_METATYPE(QCP::ResolutionUnit)
-Q_DECLARE_METATYPE(QCP::SignDomain)
-Q_DECLARE_METATYPE(QCP::MarginSide)
-Q_DECLARE_METATYPE(QCP::AntialiasedElement)
-Q_DECLARE_METATYPE(QCP::PlottingHint)
-Q_DECLARE_METATYPE(QCP::Interaction)
-Q_DECLARE_METATYPE(QCP::SelectionRectMode)
-Q_DECLARE_METATYPE(QCP::SelectionType)
+//no need to use Q_DECLARE_METATYPE on enum since Q_ENUM_NS adds enum as metatype automatically
 
 /* end of 'src/global.h' */
 
@@ -2493,6 +2478,10 @@
                       ,ssDot       ///< \enumimage{ssDot.png} a single pixel (use \ref ssDisc or \ref ssCircle if you want a round shape with a certain radius)
                       ,ssCross     ///< \enumimage{ssCross.png} a cross
                       ,ssPlus      ///< \enumimage{ssPlus.png} a plus
+                      ,ssVirtual       ///<  a minus   
+                      ,ssOccupied       ///<  a circle 
+                      ,ssHole           ///<  a circle 
+                      ,ssDoublyOccupied ///<  two circles 
                       ,ssCircle    ///< \enumimage{ssCircle.png} a circle
                       ,ssDisc      ///< \enumimage{ssDisc.png} a circle which is filled with the pen's color (not the brush as with ssCircle)
                       ,ssSquare    ///< \enumimage{ssSquare.png} a square
